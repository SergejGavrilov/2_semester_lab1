#include <iostream>
#include <fstream>
#include <vector>
using namespace std;
int lcs[2000][2000];
pair<int, int> prev[2000][2000];
int x[2000];
int y[2000];
vector<int> answer;

void LCS(int n, int m){
    int i, j;
    for (i = 0; i < n; i++){
        lcs[i][0] = 0;
    }
    for (j = 0; j < n; j++){
        lcs[0][j] = 0;
    }
    for (i = 1; i <= n; i++){
        for (j = 1; j <= m; j++){
            if (x[i] == y[j]){
                lcs[i][j] = lcs[i - 1][j - 1] + 1;
                prev[i][j].first = i - 1;
                prev[i][j].second = j - 1;
            }else{
                if (lcs[i - 1][j] >= lcs[i][j - 1]){
                    lcs[i][j] = lcs[i - 1][j];
                    prev[i][j].first = i - 1;
                    prev[i][j].second = j;
                }else{
                    lcs[i][j] = lcs[i][j - 1];
                    prev[i][j].first = i;
                    prev[i][j].second = j - 1;
                }
            }

        }

    }
   // return 0;
}

void printLCS(int i, int j){
    if (i == 0 || j == 0){
        return;
    }
    if (prev[i][j].first == (i - 1) && prev[i][j].second == (j - 1)){
        printLCS(i - 1, j - 1);
      //  out << x[i] << " ";
        answer.push_back(x[i]);
    }else{
        if (prev[i][j].first == (i - 1) && prev[i][j].second == j){
            printLCS(i - 1, j);
        }else{
            printLCS(i, j -1);
        }
    }
}

int main()
{
    int n, m, i, j;
    ifstream in;
    ofstream out;
    in.open("lcs.in", ios::in);
    out.open("lcs.out", ios::out);
   // FILE *file;
  //  file = fopen("lcs.out", "w");
    in >> n;
//    int x[n + 1];
    for (i = 1; i <= n; i++){
        in >> x[i];
    }
    in >> m;


  //  int y[m + 1];

    for (i = 1; i <= n; i++){
        in >> y[i];
    }
    LCS(n, m);
   /* for (i = 0; i <= n; i++){
        for (j = 0; j <= m; j++){
                cout << lcs[i][j] << " ";
        }
        cout << endl;
    }   */
    out << lcs[n][m] << endl;
    printLCS(n, m);
    for (i = 0; i < answer.size(); i++){
        out << answer[i] << " ";
    }
    in.close();
    out.close();
    return 0;
}
